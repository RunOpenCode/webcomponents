/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface RocCheckboxToggle {
    /**
    * Set toggle as checked.
    */
    'check': () => Promise<void>;
    /**
    * (optional) Default state of the underlining checkbox. If not provided, state from the checkbox will be used.
    */
    'checked': boolean;
    /**
    * Color of checkbox toggle.
    */
    'color': 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light';
    /**
    * (optional) Default disable state of the underlining checkbox. If not provided, disable state from the checkbox will be used.
    */
    'disabled': boolean;
    /**
    * Size of checkbox toggle.
    */
    'size': 'sm' | 'md' | 'lg';
    /**
    * Toggle checked state.
    */
    'toggle': () => Promise<void>;
    /**
    * Set toggle as unchecked.
    */
    'uncheck': () => Promise<void>;
  }
}

declare namespace LocalJSX {
  interface RocCheckboxToggle extends JSXBase.HTMLAttributes {
    /**
    * (optional) Default state of the underlining checkbox. If not provided, state from the checkbox will be used.
    */
    'checked'?: boolean;
    /**
    * Color of checkbox toggle.
    */
    'color'?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light';
    /**
    * (optional) Default disable state of the underlining checkbox. If not provided, disable state from the checkbox will be used.
    */
    'disabled'?: boolean;
    'onChange'?: (event: CustomEvent<boolean>) => void;
    /**
    * Size of checkbox toggle.
    */
    'size'?: 'sm' | 'md' | 'lg';
  }

  interface IntrinsicElements {
    'roc-checkbox-toggle': RocCheckboxToggle;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


declare global {



  interface HTMLRocCheckboxToggleElement extends Components.RocCheckboxToggle, HTMLStencilElement {}
  var HTMLRocCheckboxToggleElement: {
    prototype: HTMLRocCheckboxToggleElement;
    new (): HTMLRocCheckboxToggleElement;
  };

  interface HTMLElementTagNameMap {
    'roc-checkbox-toggle': HTMLRocCheckboxToggleElement;
  }

  interface ElementTagNameMap extends HTMLElementTagNameMap {}
}

